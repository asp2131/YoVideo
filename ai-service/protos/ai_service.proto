syntax = "proto3";

package aiservice;

// --- Common Messages ---

message TranscriptSegment {
    string text = 1;
    double start_time = 2;
    double end_time = 3;
}

message Highlight {
    string text = 1;
    double start_time = 2;
    double end_time = 3;
    float score = 4;
}

// --- Transcription Service ---

message TranscribeAudioRequest {
    bytes audio_data = 1; // Raw audio bytes
    string original_filename = 2; // e.g., "test.mp3"
}

message TranscribeAudioResponse {
    string filename = 1;
    repeated TranscriptSegment segments = 2;
}

// --- Highlight Detection Service ---

message DetectHighlightsRequest {
    repeated TranscriptSegment segments = 1;
    // int32 num_highlights = 2; // Optional: to limit results
}

message DetectHighlightsResponse {
    repeated Highlight highlights = 1;
}

// --- Caption Formatting Service ---

message FormatCaptionsRequest {
    repeated TranscriptSegment segments = 1;
    int32 max_chars_per_line = 2;
    int32 max_lines_per_caption = 3;
}

message FormatCaptionsResponse {
    string srt_content = 1;
}

// --- AI Service Definition ---

service AIService {
    rpc TranscribeAudio(TranscribeAudioRequest) returns (TranscribeAudioResponse);
    rpc DetectHighlights(DetectHighlightsRequest) returns (DetectHighlightsResponse);
    rpc FormatCaptions(FormatCaptionsRequest) returns (FormatCaptionsResponse);
}
